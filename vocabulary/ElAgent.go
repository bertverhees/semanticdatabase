package vocabulary

import (
	"vocabulary"
)

/**
	A delayed routine call, whose arguments may be open, partially closed or closed.
	Generated by special reference to a routine, usually via a dedicated keyword,
	such as 'lambda' or 'agent', or other special syntax. Instances may include
	closed delayed calls like calculate_age (dob="1987-09-13", today="2019-06-03")
	but also partially open calls such as format_structure (struct=?, style=3) ,
	where struct is an open argument. Evaluation type (i.e. type of runtime
	evaluated form) is BMM_SIGNATURE .
*/

type IElAgent interface {
	EvalType (  )  BMM_ROUTINE_TYPE  Post_result : Result = definition.signature
	IsCallable (  )  Boolean  Post_result_validity : Result = open_arguments = Void
	Reference (  )  string
	// From: EL_FEATURE_REF
	Reference (  )  string
	// From: EL_VALUE_GENERATOR
	Reference (  )  string
	// From: EL_EXPRESSION
	EvalType (  )  IBmmType
	// From: EL_EXPRESSION
	IsBoolean (  )  Boolean  Post_result : Result = eval_type().equal( {BMM_MODEL}.boolean_type_definition())
}

type ElAgent struct {
	ElFeatureRef
	ElValueGenerator
	ElSimple
	ElTerminal
	ElExpression
	// Closed arguments of a routine call as a tuple of objects.
	ClosedArgs	IElTuple	`yaml:"closedargs" json:"closedargs" xml:"closedargs"`
	/**
		Optional list of names of open arguments of the call. If not provided, and the
		name refers to a routine with more arguments than supplied in closed_args , the
		missing arguments are inferred from the definition .
	*/
	OpenArgs	[]string	`yaml:"openargs" json:"openargs" xml:"openargs"`
	// Reference to definition of a routine for which this is an agent, if one exists.
	Definition	IBmmRoutine	`yaml:"definition" json:"definition" xml:"definition"`
	// Name of the routine being called.
	Name	string	`yaml:"name" json:"name" xml:"name"`
	IsWritable	bool	`yaml:"iswritable" json:"iswritable" xml:"iswritable"`
}

/**
	Eval type is the signature corresponding to the (remaining) open arguments and
	return type, if any.
*/
func (e *ElAgent) EvalType (  )  BMM_ROUTINE_TYPE  Post_result : Result = definition.signature {
	return nil
}
// True if there are no open arguments.
func (e *ElAgent) IsCallable (  )  Boolean  Post_result_validity : Result = open_arguments = Void {
	return nil
}
// Generated full reference name, including scoping elements.
func (e *ElAgent) Reference (  )  string {
	return nil
}
// From: EL_FEATURE_REF
/**
	Generated full reference name, consisting of scoping elements and name
	concatenated using dot notation.
*/
func (e *ElAgent) Reference (  )  string {
	return nil
}
// From: EL_VALUE_GENERATOR
/**
	Generated full reference name, based on constituent parts of the entity. Default
	version outputs name field.
*/
func (e *ElAgent) Reference (  )  string {
	return nil
}
// From: EL_EXPRESSION
/**
	Meta-type of expression entity used in type-checking and evaluation. Effected in
	descendants.
*/
func (e *ElAgent) EvalType (  )  IBmmType {
	return nil
}
// From: EL_EXPRESSION
/**
	True if eval_type is notionally Boolean (i.e. a BMM_SIMPLE_TYPE with type_name()
	= Boolean ).
*/
func (e *ElAgent) IsBoolean (  )  Boolean  Post_result : Result = eval_type().equal( {BMM_MODEL}.boolean_type_definition()) {
	return nil
}
