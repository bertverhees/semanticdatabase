package vocabulary

import (
	"vocabulary"
)

// Abstract parent of any persistable form of a BMM model, e.g. P_BMM_SCHEMA .

type IBmmSchema interface {
	ValidateCreatedPreState (  ) 
	LoadFinalisePreState (  ) 
	Merge ( other BMM_SCHEMA [1] )  state = State_includes_pending Pre_other_valid : includes_to_process.has (included_schema.schema_id)
	Validate (  ) 
	CreateBmmModelPreState (  ) 
	ReadToValidate (  )  Boolean  Post_state : state = State_includes_processed
	SchemaId (  )  string
}

type BmmSchema struct {
	BmmModelMetadata
	// Version of BMM model, enabling schema evolution reasoning. Persisted attribute.
	BmmVersion	string	`yaml:"bmmversion" json:"bmmversion" xml:"bmmversion"`
	/**
		Inclusion list of any form of BMM model, in the form of a hash of individual
		include specifications, each of which at least specifies the id of another
		schema, and may specify a namespace via which types from the included schemas
		are known in this schema. Persisted attribute.
	*/
	Includes	Hash <String, BMM_INCLUDE_SPEC >	`yaml:"includes" json:"includes" xml:"includes"`
	// Generated by create_bmm_model from persisted elements.
	BmmModel	IBmmModel	`yaml:"bmmmodel" json:"bmmmodel" xml:"bmmmodel"`
	// Current processing state.
	State	BMM_SCHEMA_STATE	`yaml:"state" json:"state" xml:"state"`
	/**
		Name of this model, if this schema is a model root point. Not set for
		sub-schemas that are not considered models on their own.
	*/
	ModelName	string	`yaml:"modelname" json:"modelname" xml:"modelname"`
	/**
		Name of model expressed in schema; a 'schema' usually contains all of the
		packages of one 'model' of a publisher. A publisher with more than one model can
		have multiple schemas.
	*/
	SchemaName	string	`yaml:"schemaname" json:"schemaname" xml:"schemaname"`
	// Revision of schema.
	SchemaRevision	string	`yaml:"schemarevision" json:"schemarevision" xml:"schemarevision"`
	// Schema development lifecycle state.
	SchemaLifecycleState	string	`yaml:"schemalifecyclestate" json:"schemalifecyclestate" xml:"schemalifecyclestate"`
	// Primary author of schema.
	SchemaAuthor	string	`yaml:"schemaauthor" json:"schemaauthor" xml:"schemaauthor"`
	// Description of schema.
	SchemaDescription	string	`yaml:"schemadescription" json:"schemadescription" xml:"schemadescription"`
	// Contributing authors of schema.
	SchemaContributors	[]string	`yaml:"schemacontributors" json:"schemacontributors" xml:"schemacontributors"`
}

/**
	Do some basic validation post initial creation check that package structure is
	regular: only top-level packages can have qualified names no top-level package
	name can be a direct parent or child of another (child package must be declared
	under the parent) check that all classes are mentioned in the package structure
	check that all models refer to valid packages
*/
func (b *BmmSchema) ValidateCreatedPreState (  )  {
	return
}
/**
	Finalisation work: convert packages to canonical form, i.e. full hierarchy with
	no packages with names like aa.bb.cc set up include processing list
*/
func (b *BmmSchema) LoadFinalisePreState (  )  {
	return
}
/**
	Merge in class and package definitions from other , except where the current
	schema already has a definition for the given type or package.
*/
func (b *BmmSchema) Merge ( other BMM_SCHEMA [1] )  state = State_includes_pending Pre_other_valid : includes_to_process.has (included_schema.schema_id) {
	return nil
}
// Main validation prior to generation of bmm_model .
func (b *BmmSchema) Validate (  )  {
	return
}
// Populate bmm_model from schema.
func (b *BmmSchema) CreateBmmModelPreState (  )  {
	return
}
// True when validation may be commenced.
func (b *BmmSchema) ReadToValidate (  )  Boolean  Post_state : state = State_includes_processed {
	return nil
}
/**
	Identifier of this schema, used for stating inclusions and identifying files.
	Formed as: {BMM_DEFINITIONS}.create_schema_id ( rm_publisher , schema_name ,
	rm_release ) E.g. "openehr_rm_ehr_1.0.4" .
*/
func (b *BmmSchema) SchemaId (  )  string {
	return nil
}
