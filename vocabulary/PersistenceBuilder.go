package vocabulary

/* ============================= PBmmModelElement =====================================*/
type PBmmModelElementBuilder struct {
	Builder
}

func (i *PBmmModelElementBuilder) SetDocumentation(v string) *PBmmModelElementBuilder {
	i.AddError(i.object.(*PBmmModelElement).SetDocumentation(v))
	return i
}

/* ============================= PBmmPackageContainer =====================================*/
type PBmmPackageContainerBuilder struct {
	Builder
}

func NewPBmmPackageContainerBuilder() *PBmmPackageContainerBuilder {
	builder := &PBmmPackageContainerBuilder{}
	builder.object = NewPBmmPackageContainer()
	return builder
}

//BUILDER ATTRIBUTES
/**
Package structure as a hierarchy of packages each potentially containing names
of classes in that package in the original model.
*/
func (i *PBmmPackageContainerBuilder) SetPackages(v map[string]IPBmmPackage) *PBmmPackageContainerBuilder {
	i.AddError(i.object.(*PBmmPackageContainer).SetPackages(v))
	return i
}

func (i *PBmmPackageContainerBuilder) Build() (*PBmmPackageContainer, []error) {
	if len(i.errors) > 0 {
		return nil, i.errors
	} else {
		return i.object.(*PBmmPackageContainer), nil
	}
}

/* ============================= PBmmSchema =====================================*/
type PBmmSchemaBuilder struct {
	PBmmPackageContainerBuilder
	BmmSchemaBuilder
}

func NewPBmmSchemaBuilder() *PBmmSchemaBuilder {
	builder := &PBmmSchemaBuilder{}
	builder.object = NewPBmmSchema()
	return builder
}

// BUILDER ATTRIBUTES
// Primitive type definitions. Persisted attribute.
func (i *PBmmSchemaBuilder) SetPrimitiveTypes(v []IPBmmClass) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetPrimitiveTypes(v))
	return i
}

// Class definitions. Persisted attribute.
func (i *PBmmSchemaBuilder) SetClassDefinitions(v []IPBmmClass) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetClassDefinitions(v))
	return i
}

// From: PBmmPackageContainer
/**
Package structure as a hierarchy of packages each potentially containing names
of classes in that package in the original model.
*/
func (i *PBmmSchemaBuilder) SetPackages(v map[string]IPBmmPackage) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetPackages(v))
	return i
}

// From: BmmSchema
// Version of BMM model, enabling schema evolution reasoning. Persisted attribute.
func (i *PBmmSchemaBuilder) SetBmmVersion(v string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetBmmVersion(v))
	return i
}

// From: BmmSchema
/**
Inclusion list of any form of BMM model, in the form of a hash of individual
include specifications, each of which at least specifies the id of another
schema, and may specify a namespace via which types from the included schemas
are known in this schema. Persisted attribute.
*/
func (i *PBmmSchemaBuilder) SetIncludes(v map[string]IBmmIncludeSpec) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetIncludes(v))
	return i
}

// From: BmmSchema
// Generated by create_bmm_model from persisted elements.
func (i *PBmmSchemaBuilder) SetBmmModel(v IBmmModel) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetBmmModel(v))
	return i
}

// From: BmmSchema
// Current processing state.
func (i *PBmmSchemaBuilder) SetState(v BmmSchemaState) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetState(v))
	return i
}

// From: BmmSchema
/**
name of this model, if this schema is a model root point. Not set for
sub-schemas that are not considered models on their own.
*/
func (i *PBmmSchemaBuilder) SetModelName(v string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetModelName(v))
	return i
}

// From: BmmSchema
/**
name of model expressed in schema; a 'schema' usually contains all of the
packages of one 'model' of a publisher. A publisher with more than one model can
have multiple schemas.
*/
func (i *PBmmSchemaBuilder) SetSchemaName(v string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetSchemaName(v))
	return i
}

// From: BmmSchema
// Revision of schema.
func (i *PBmmSchemaBuilder) SetSchemaRevision(v string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetSchemaRevision(v))
	return i
}

// From: BmmSchema
// Schema development lifecycle state.
func (i *PBmmSchemaBuilder) SetSchemaLifecycleState(v string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetSchemaLifecycleState(v))
	return i
}

// From: BmmSchema
// Primary author of schema.
func (i *PBmmSchemaBuilder) SetSchemaAuthor(v string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetSchemaAuthor(v))
	return i
}

// From: BmmSchema
// Description of schema.
func (i *PBmmSchemaBuilder) SetSchemaDescription(v string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetSchemaDescription(v))
	return i
}

// From: BmmSchema
// Contributing authors of schema.
func (i *PBmmSchemaBuilder) SetSchemaContributors(v []string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetSchemaContributors(v))
	return i
}

// From: BmmModelMetadata
// Publisher of model expressed in the schema.
func (i *PBmmSchemaBuilder) SetRmPublisher(v string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetRmPublisher(v))
	return i
}

// From: BmmModelMetadata
// Release of model expressed in the schema as a 3-part numeric, e.g. "3.1.0" .
func (i *PBmmSchemaBuilder) SetRmRelease(v string) *PBmmSchemaBuilder {
	i.AddError(i.object.(*PBmmSchema).SetRmRelease(v))
	return i
}

func (i *PBmmSchemaBuilder) Build() (*PBmmSchema, []error) {
	if len(i.errors) > 0 {
		return nil, i.errors
	} else {
		return i.object.(*PBmmSchema), nil
	}
}

/* ============================= PBmmPackage =====================================*/
type PBmmPackageBuilder struct {
	PBmmPackageContainerBuilder
	PBmmModelElementBuilder
}

func NewPBmmPackageBuilder() *PBmmPackageBuilder {
	builder := &PBmmPackageBuilder{}
	builder.object = NewPBmmPackage()
	return builder
}

//BUILDER ATTRIBUTES
/**
name of the package from schema; this name may be qualified if it is a top-level
package within the schema, or unqualified. Persistent attribute.
*/
func (i *PBmmPackageBuilder) SetName(v string) *PBmmPackageBuilder {
	i.AddError(i.object.(*PBmmPackage).SetName(v))
	return i
}

// List of classes in this package. Persistent attribute.
func (i *PBmmPackageBuilder) SetClasses(v []string) *PBmmPackageBuilder {
	i.AddError(i.object.(*PBmmPackage).SetClasses(v))
	return i
}

// BMM_PACKAGE created by create_bmm_package_definition .
func (i *PBmmPackageBuilder) SetBmmPackageDefinition(v IBmmPackage) *PBmmPackageBuilder {
	i.AddError(i.object.(*PBmmPackage).SetBmmPackageDefinition(v))
	return i
}

// From: PBmmPackageContainer
/**
Package structure as a hierarchy of packages each potentially containing names
of classes in that package in the original model.
*/
func (i *PBmmPackageBuilder) SetPackages(v map[string]IPBmmPackage) *PBmmPackageBuilder {
	i.AddError(i.object.(*PBmmPackage).SetPackages(v))
	return i
}

// From: PBmmModelElement
// Optional documentation of this element.
func (i *PBmmPackageBuilder) SetDocumentation(v string) *PBmmPackageBuilder {
	i.AddError(i.object.(*PBmmPackage).SetDocumentation(v))
	return i
}

func (i *PBmmPackageBuilder) Build() (*PBmmPackage, []error) {
	if len(i.errors) > 0 {
		return nil, i.errors
	} else {
		return i.object.(*PBmmPackage), nil
	}
}

/* ============================= PBmmType =====================================*/
/* ============================= PBmmClass =====================================*/
/* ============================= PBmmGenericParameter =====================================*/
/* ============================= PBmmProperty =====================================*/
/* ============================= PBmmBaseType =====================================*/
/* ============================= PBmmSimpleType =====================================*/
/* ============================= PBmmOpenType =====================================*/
/* ============================= PBmmGenericType =====================================*/
/* ============================= PBmmContainerType =====================================*/
/* ============================= PBmmSingleProperty =====================================*/
/* ============================= PBmmSinglePropertyOpen =====================================*/
/* ============================= PBmmGenericProperty =====================================*/
/* ============================= PBmmContainerProperty =====================================*/
/* ============================= PBmmEnumeration =====================================*/
/* ============================= PBmmEnumerationString =====================================*/
/* ============================= PBmmEnumerationInt =====================================*/
